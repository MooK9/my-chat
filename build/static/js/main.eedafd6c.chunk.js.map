{"version":3,"sources":["proxy/proxy.ts","proxy/eventproducer.ts","input/Textinput.tsx","login/Login.tsx","input/TextInputAndButton.tsx","cards/ConversationCard.tsx","components/LeftPane.tsx","cards/MessageCard.tsx","components/RightPane.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["proxy","ws","inbox","WebSocket","addEventListener","e","p","JSON","parse","data","type","alert","message","dispatch","cid","channelId","conversations","find","x","lastMessages","push","conversation","packet","this","send","stringify","listeners","listener","obj","splice","findIndex","Error","filter","args","call","TextInput","state","value","props","focus","attrs","autofocus","autoFocus","onEnter","onKeyDown","keyCode","className","onChange","setState","target","onBlur","onFocus","placeholder","Component","Login","email","password","displayName","register","src","width","onClick","href","preventDefault","console","log","sendPacket","staySignedIn","forceUpdate","removeAllEventListener","TextInputAndButton","textInput","React","createRef","current","ref","buttonContent","ConversationCard","m","lastMessage","length","selected","onSelect","name","Date","timeStamp","toLocaleTimeString","content","LeftPane","c","firstMessage","user","tag","text","sendContactRequest","map","key","selectedConversation","MessageCard","own","PureComponent","RightPane","referenceTo","contentType","onBack","id","senderId","onSend","Main","undefined","App","showLogin","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.eedafd6c.chunk.js","sourcesContent":["import {MessageDto, InboxDto, IncomingPacket, OutgoingPacket} from '../interfaces/chat';\r\nimport { EventProducer } from './eventproducer';\r\n\r\n\r\ninterface ProxyEventMap{\r\n    \"login\": () => void;\r\n    \"message\": ( channelId: string, message: MessageDto ) => void;\r\n    \"conversation\": ( channelId: string ) => void;\r\n}\r\n\r\nclass Proxy extends EventProducer<ProxyEventMap>{\r\n    private ws: WebSocket;\r\n    inbox: InboxDto | null = null;\r\n    constructor()\r\n    {\r\n        super();\r\n        //TODO change this to aut address\r\n        this.ws = new WebSocket( \"wss://raja.aut.bme.hu/chat/\" );\r\n        this.ws.addEventListener( \"open\", () =>{\r\n            \r\n\r\n        });\r\n        this.ws.addEventListener( \"message\", e =>{\r\n    \r\n        });\r\n        \r\n        this.ws.addEventListener( \"message\", e =>{\r\n            let p = <IncomingPacket>JSON.parse( e.data );\r\n            switch ( p.type ){\r\n                case \"error\":\r\n                    alert( p.message );\r\n                     break;\r\n                case \"login\":\r\n                    this.inbox = p.inbox;\r\n                    this.dispatch( \"login\" );\r\n                    break;\r\n                case \"message\":\r\n                    let cid = p.channelId;\r\n                    this.inbox!.conversations.find( x => x.channelId === cid )?.lastMessages.push( p.message );\r\n                    this.dispatch( \"message\", cid, p.message );\r\n                     break;\r\n                case \"conversationAdded\":\r\n                    this.inbox!.conversations.push( p.conversation );\r\n                    this.dispatch( \"conversation\", p.conversation.channelId );\r\n                    break;\r\n                }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    public sendPacket( packet: OutgoingPacket )\r\n    {\r\n    this.ws.send( JSON.stringify( packet ) );\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport var proxy = new Proxy();\r\n\r\n\r\n\r\n","export class EventProducer<M>\r\n{\r\n\r\n    private listeners: { type: keyof M, listener: any, obj?: Object }[] = [];\r\n\r\n    addEventListener<K extends keyof M>( type: K, listener: M[ K ], obj?: Object )\r\n    {\r\n        this.listeners.push( { type, listener, obj } );\r\n    }\r\n    removeEventListener<K extends keyof M>( type: K, listener: M[ K ] )\r\n    {\r\n        this.listeners.splice( this.listeners.findIndex( x => x.type === type && x.listener === listener ), 1 );\r\n    }\r\n    removeAllEventListener( obj: Object )\r\n    {\r\n        if ( !obj )\r\n            throw new Error( \"Must specify object\" );\r\n        this.listeners = this.listeners.filter( x => x.obj !== obj );\r\n    }\r\n    protected dispatch<K extends keyof M>( type: K, ...args )\r\n    {\r\n        for ( let listener of this.listeners.filter( x => x.type === type ) )\r\n            listener.listener.call( listener.obj, ...args );\r\n    }\r\n\r\n\r\n\r\n}","import React, { Component } from 'react';\r\nimport './Textinput.css'\r\nexport interface TextInputOptions {\r\n    value?: string;\r\n    onChange?: (value: string) => void;\r\n    type?: \"text\" | \"password\" | \"email\";\r\n    placeholder?: string;\r\n    onEnter?: () => void;\r\n    autofocus?: boolean;\r\n};\r\n\r\nexport class TextInput extends Component<TextInputOptions>\r\n{\r\n    state = { value: this.props.value, focus: false };\r\n    render() {\r\n        let attrs = {} as any;\r\n        if (this.props.autofocus)\r\n            attrs.autoFocus = true;\r\n        if (this.props.onEnter)\r\n            attrs.onKeyDown = e => {\r\n                if (e.keyCode === 13)\r\n                    this.props.onEnter!();\r\n            };\r\n        return (\r\n            <div className=\"text-input\">\r\n                <input type={this.props.type ?? \"text\"} value={this.state.value}\r\n                    onChange={e => {\r\n                        this.setState({ value: e.target.value });\r\n                        this.props.onChange?.(e.target.value);\r\n                    }}\r\n                    onBlur={() => this.setState({ focus: false })}\r\n                    onFocus={() => this.setState({ focus: true })}\r\n                    {...attrs} />\r\n                <div className=\"focus-indicator\"></div>\r\n                <label className={this.state.value || this.state.focus ? \"subsided\" : \"\"}>\r\n                    {this.props.placeholder}\r\n                </label>\r\n            </div>);\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport {proxy} from '../proxy/proxy';\r\nimport { TextInput } from '../input/Textinput';\r\nexport class Login extends Component{\r\n    state = { email: \"\", password: \"\", displayName: \"\", register: false };\r\n\r\n   \r\n\r\n    render()\r\n    {\r\n        return (\r\n        \r\n            <div className=\"login\">\r\n                <img src=\"logo512.png\" width=\"256\" />\r\n                <TextInput type=\"email\" placeholder=\"Email (someone@example.com)\" value={this.state.email}\r\n                   onChange={ e => {\r\n                    if(e===\"NPRSDP\" || e===\"nprsdp\")\r\n                        this.setState({displayName: \"Ádám\"})\r\n                                   \r\n                          this.setState( { email: e } ) }}   \r\n                    onEnter={ () => this.onClick() }\r\n                     autofocus={ true }/> \r\n              \r\n                <TextInput type=\"password\" placeholder=\"Password\" value={this.state.password} onChange={e => this.setState({ password: e })}\r\n                    onEnter={() => this.onClick()} />\r\n\r\n\r\n                {this.state.register &&\r\n                    <TextInput type=\"text\" placeholder=\"Display Name (Agent Smith)\" value={this.state.displayName}\r\n                        onChange={e => this.setState({ displayName: e })}\r\n                        onEnter={() => this.onClick()} />}\r\n\r\n                <button type=\"button\" onClick={() => this.onClick()}>\r\n                    {this.state.register ? \"Register\" : \"Login\"}\r\n                </button>\r\n                <p>{this.state.register ? \"Switch back to \" : \"Have no account yet? Go and \"}\r\n                    <a href=\"\" onClick={e => { e.preventDefault(); this.setState({ register: !this.state.register }); }}>\r\n                        {this.state.register ? \"Login\" : \"Register\"}\r\n                    </a>\r\n                </p>\r\n                <a href=\"https://www.google.hu/search?q=privacy\">Privacy Policy</a>\r\n            </div>);\r\n        \r\n    }\r\n\r\n    onClick(){\r\n        console.log(\"onclick\")\r\n        if ( this.state.register )\r\n            proxy.sendPacket( { type: \"register\", email: this.state.email, password: this.state.password,\r\n             displayName: this.state.displayName, staySignedIn: false } );\r\n        else\r\n            proxy.sendPacket( { type: \"login\", email: this.state.email, password: this.state.password,\r\n        staySignedIn: false } );\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        proxy.addEventListener(\"login\", () => this.forceUpdate(), this);\r\n    }\r\n    componentWillUnmount() {\r\n        proxy.removeAllEventListener(this);\r\n    }\r\n\r\n}","import { TextInputOptions, TextInput } from \"./Textinput\";\r\nimport React,{ Component } from \"react\";\r\n\r\nexport interface TextInputAndButtonOptions extends TextInputOptions\r\n{\r\nbuttonContent?: string;\r\nonClick?: ( text: string ) => boolean | void;\r\n}\r\n\r\nexport class TextInputAndButton extends Component<TextInputAndButtonOptions>{\r\n    textInput = React.createRef<TextInput>();\r\n\r\n    onClick(){\r\n    if ( this.props.onClick?.( this.textInput.current?.state.value ?? \"\" ) )\r\n        this.textInput.current?.setState( { value: \"\" } );\r\n}\r\n    render(){\r\n        return (\r\n            <div className=\"text-input-and-button\">\r\n                <TextInput { ...this.props } ref={ this.textInput } onEnter={ () => this.onClick() } />\r\n                <button type=\"button\" onClick={ () => this.onClick() }>\r\n                  { this.props.buttonContent }\r\n                </button>\r\n            </div>\r\n        );\r\n    }\r\n}","import { ConversationDto } from \"../interfaces/chat\";\r\nimport React,{ Component } from \"react\";\r\nimport { proxy } from \"../proxy/proxy\";\r\n\r\nexport class ConversationCard extends Component<{conversation: ConversationDto, selected: boolean, onSelect: () => void}>\r\n    {\r\n        componentDidMount(){\r\n        proxy.addEventListener( \"message\", ( cid, m ) => {\r\n            if ( cid === this.props.conversation.channelId )\r\n            this.forceUpdate();\r\n        }, this );\r\n        }\r\n        componentWillUnmount()\r\n        {\r\n        proxy.removeAllEventListener( this );\r\n        }\r\n\r\n    render()\r\n    {\r\n    let lastMessage = this.props.conversation.lastMessages.length > 0 ?\r\n    this.props.conversation.lastMessages[ this.props.conversation.lastMessages.length - 1 ] : null;\r\n    return (\r\n    <div className={ \"conversation-card\" + ( this.props.selected ? \" selected\" : \"\" ) }\r\n    onClick={ () => this.props.onSelect() }>\r\n    <div className=\"row\">\r\n    <span className=\"channel-name\">{ this.props.conversation.name }</span>\r\n    <span className=\"time\">\r\n    { lastMessage && new Date( lastMessage.timeStamp ).toLocaleTimeString() }\r\n    </span>\r\n    </div>\r\n    <span className=\"last-message\">{ lastMessage?.content }</span>\r\n    </div>\r\n    );\r\n    }\r\n    }","import React,{ Component } from \"react\";\r\nimport { InboxDto, ConversationDto } from \"../interfaces/chat\";\r\nimport { TextInputAndButton } from \"../input/TextInputAndButton\";\r\nimport { proxy } from \"../proxy/proxy\";\r\nimport { ConversationCard } from \"../cards/ConversationCard\";\r\n\r\nexport class LeftPane extends Component<{inbox: InboxDto, selectedConversation: ConversationDto | undefined,\r\n    onSelect: ( c: ConversationDto ) => void    }>\r\n    {\r\n        componentDidMount(){\r\n            proxy.addEventListener( \"conversation\", c => this.forceUpdate(), this );\r\n        }\r\n        componentWillUnmount(){\r\n            proxy.removeAllEventListener( this );\r\n        }\r\n\r\n        sendContactRequest( email: string ){\r\n            proxy.sendPacket( { type: \"contactRequest\", email, firstMessage: \"Hello\" } );\r\n            return true;\r\n        }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"left-pane\">\r\n                <p className=\"my-tag\">My tag: { this.props.inbox.user.tag }</p>\r\n                <TextInputAndButton type=\"text\" placeholder=\"Add user by Tag (Name#123)\"\r\n                buttonContent=\"Inv\"\r\n                onClick={ text => this.sendContactRequest( text ) } />\r\n                <div className=\"conversations\">\r\n                    { this.props.inbox.conversations.map( x =>\r\n                    <ConversationCard\r\n                    key={ x.channelId }\r\n                    conversation={ x }\r\n                    selected={ x === this.props.selectedConversation }\r\n                    onSelect={ () => this.props.onSelect( x ) } /> ) }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    }","import React, { PureComponent } from \"react\";\r\nimport { MessageDto } from \"../interfaces/chat\";\r\n\r\nexport class MessageCard extends PureComponent<{ message: MessageDto, own: boolean }>{\r\nrender(){\r\n    return (\r\n    <div className={ \"message-card\" + ( this.props.own ? \" own\" : \"\" ) }>\r\n        <div className=\"bubble\">\r\n            <span className=\"text\">{ this.props.message.content }</span>\r\n            <span className=\"time\">\r\n                { new Date( this.props.message.timeStamp ).toLocaleTimeString() }\r\n            </span>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n}","import { proxy } from \"../proxy/proxy\";\r\nimport React, { Component } from \"react\";\r\nimport { ConversationDto } from \"../interfaces/chat\";\r\nimport { TextInputAndButton } from \"../input/TextInputAndButton\";\r\nimport { MessageCard } from \"../cards/MessageCard\";\r\n\r\nexport class RightPane extends Component<{ conversation?: ConversationDto, onBack: () => void }>\r\n{\r\n    componentDidMount(){\r\n     proxy.addEventListener( \"message\", ( cid, m ) =>{\r\n        if ( cid === this.props.conversation?.channelId )\r\n        this.forceUpdate();\r\n        }, this );\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        proxy.removeAllEventListener( this );\r\n    }\r\n\r\n    onSend( text: string ){\r\n        proxy.sendPacket( { type: \"message\", channelId: this.props.conversation!.channelId, referenceTo: 0, contentType: 0, content: \"N: \"+ text } );\r\n        return true;\r\n    }\r\n\r\n    render()\r\n    {\r\n        return (\r\n        <div className=\"right-pane column\">\r\n            { this.props.conversation &&\r\n            <>\r\n            <div className=\"conversation-header row\">\r\n                <button type=\"button\" className=\"only-narrow\"\r\n                onClick={ () => this.props.onBack() }>Back</button>\r\n                <p>{ this.props.conversation?.name }</p>\r\n            </div>\r\n        <div className=\"messages\">\r\n            { this.props.conversation?.lastMessages.map( x =>\r\n            <MessageCard key={ x.id } message={ x }\r\n            own={ x.senderId === proxy.inbox?.user.id } /> ) }\r\n        </div>\r\n            <div className=\"send-message row\">\r\n                <TextInputAndButton type=\"text\" placeholder=\"Type something awesome here...\"\r\n                buttonContent=\"Send\" onClick={ x => this.onSend( x ) } />\r\n            </div>\r\n        </>\r\n        }\r\n        </div>\r\n        );\r\n        }\r\n    }\r\n","import React, { Component } from \"react\";\r\nimport { ConversationDto } from \"../interfaces/chat\";\r\nimport { LeftPane } from \"./LeftPane\";\r\nimport { RightPane } from \"./RightPane\";\r\nimport { proxy } from \"../proxy/proxy\";\r\n\r\nexport class Main extends Component{\r\nstate = { selectedConversation: undefined as ( ConversationDto | undefined ) };\r\nrender(){\r\n    let className = \"main row \" + ( this.state.selectedConversation ? \"right\" : \"left\" );\r\n    return (\r\n    <div className={ className }>\r\n        <LeftPane\r\n            inbox={ proxy.inbox! }\r\n            selectedConversation={ this.state.selectedConversation }\r\n            onSelect={ c => this.setState( { selectedConversation: c } ) } />\r\n            \r\n        <RightPane conversation={ this.state.selectedConversation }\r\n            onBack={ () => this.setState( { selectedConversation: undefined } ) } />\r\n    </div>\r\n    );\r\n}\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {Login} from \"./login/Login\";\nimport { proxy } from './proxy/proxy';\nimport { Main } from './components/Main';\n\nexport default class App extends Component\n{\n    state = { showLogin: true };\n\n    componentDidMount()\n    {\n      proxy.addEventListener( \"login\", () => { this.setState( { showLogin: false } ) } );\n    }\n  \n    render()\n    {\n      return (\n        <div className=\"app\">\n          { this.state.showLogin ? <Login /> : <Main /> }\n        </div>\n      );\n    }\n  \n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}